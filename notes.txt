IEX shortcuts:
Ctrl + A - Cursor moved to Starting of the line
Ctrl + K - Characters after cursor position erased
#iex:break - Breaking the IEX runner comment

elixir -h
iex -h
mix help
mix help run

Running and compiling the code in normal terminal using MIX
mix
mix test
mix compile
mix run
mix run -e Dicitonary.hello

Compiling in IEX
c "lib/dictionary.ex"
r Dictionary

Downloading files using curl command:
curl https://coding-gnome.com/courses/e4p2/assets/words.txt >words.txt

Function refresh:
String.split(~r/\n/, trim: true) - Do not put regular expressions in double quotes
File.read! vs File.read

Coding and thinking as transformation of states in functional programming
New field - 
	Module attribute - loaded at compilation time
Example:
 @word_list "assets/words.txt"
        |> File.read!()
        |> String.split(~r/\n/, trim: true) 

Datatypes and corresponding functions:
Usage of Codepoints ?c

Integer - supports different base numbers
	- trunc, round , div
	- String.to_integer, also String.to_integer along with basetype for conversion
Atoms	- starts with : followed by lowercase character, special characters and double quotes
	- starts with Uppercase letters. Example Module name Dictionary internal mapped as ":Elixir.Dictionary" for
          Erlang representation
	- is_atom function
	- evaluting code inside atom. Example: "next-number: #{a+1}"

Boolean - true, false , nil (Falsy)
	- and / or / not (require true or false as part of evalution
	- && / || / !  (truthy values)
	- && / and  - returns the rhs value, if lhs value is true
	- || / or   - returns the rhs value, if lhs value is false
	- Bitwise
Ranges	- a = 1..5 
	- 'in' operator to verify the validation bound  Example: 4 in a
	- for i <- a, do: i * 7
Sigils	- starting with tilte character ~ followed by type
	- ~s[hello]
	- three ways of representation 
		- ~w|...|,~c/.../,~s"...",~S'...'
		- ~C<...>, ~r{...}, (...),[...]
		- multiline support 
			~w"""
			    .....
			  """
	- lowercase sigils supports interpolation, while upper case do not
	- sigils to work with date and time - ~D, ~T, ~N, ~U
	- helps to reduce visual overload. Ex: defstruct ~w[one , two, three]
	- default sigils are available in Kernel module
	- sigil concepts can be implemented by defining a function name starting with sigil_<<characters>> with two parameters 1. string and 2. modifiers.

Regular Expressions
	- Regex module for regular expression exploration
	- Kernel.=~ - regular expression match with strings
	- only replace the first occurance of a string using global: false used in String.replace, Regex.replace function as parameter

Tuples
	- fixed length of collection of values
	- example: {x, y}, {x, y, z}
	- serves the same function
	- for smaller element size
	- commonly/frequently used to pass flagged values to/fro functions
	- {:ok, contents}, {:error, reason}
	- Tuples start at 0
		iex> Tuple.insert_at(tuple, 0, :foo)
   		     {:foo, :bar, :baz}
Lists
	- lists design suit well for fn language
	- lists are not arrays
	- lists are linked list
	- proper and improperlist
	- head|tail
	- accessing elements from top of the list easily	

Map
	- key value pair 
	- two common ways to create map
		- using atom as key. Example %{firstname: "foo",lastname: "bar"}
		- accessing by map[:firstname] or map.firstname
		- result varies when no matching key found
		- with map[:middlename] - nil, map.middlename - keyerror
		- other datatypes as key. Represented as
			- %{"firstname" => "hello"}
		- can be considered similar to array needs
		- module used Map, Enum to work with maps

Pattern matching
	- used in functional programming 
	- binding a value to lhs of = sign
	- expressions cannot be evaluated along with matching
	- _ not bound to pattern matching
	- ^ (uparrow) - solution used for pin operation
	- pattern matching at function parameter level
		- swap({x, y}), match(t={a, b})

List
	- decomposing the list using head and tail 
	- examples on working with list
		- finding the length of the list
		- sum of the elements in the list
		- square the elements in the list
		- map with a function in the list where function is parameter




Query:
When to use String.to_integer vs String.parse
What is the purpose of using "use" vs "import" in iex? (Refer the usage of "use Bitwise" in iex boolean section)
How to get the latest value of Time using different variable assignment mechanisms like interpolation, variable assignmentetc?

Design:
SRP - Each function body is responsible for just a single transformation.
-use muscle memory to handle all the low-level jobs
-api design includes public side and private side
	- new_game -> will define the games structure
	- make_move -> client side playing the game with latest state
	- state -> maintained at server side to hold game info and unable to client
	- tally -> managed at client and server interaction.Also contains information about game and moves related to client.

Dialyzer
	-used to check the elixir code for bugs with type-checking
	-adding type specification to your code will make it easier for other people to see what the intent is
	- types specs @spec, @type
	- https://hexdocs.pm/elixir/typespecs.html (need to explore)
	- adding dependence via mix.exs - deps
		{:dialyxir, "~> 1.0", only: [:dev], runtime: false},
	invoking mix deps.get

Elixir world:
- defdelegate
- alias
- defstruct

iex:
iex --erl "-kernel shell_history enabled"

Challenge:
Write a function even_length? that uses pattern matching only to return false if the list you pass it has an odd number of elements, true otherwise.
  def even_length?([]), do: false
  def even_length?([_h1, _h2 | []]), do: true
  def even_length?([_h1, _h2 | tail]), do: even_length?(tail)
  def even_length?(_listnum), do: false 

Note: Need to explore similar logic using 'when' guards
Pattern matching at the function clause:
 - game = %{game_state: :won}
 - verifying more than one state using when guard at function head
   by assigning a variable at function pattern matcj
	game = %{game_state: state} when state in [:won, :lost]

Also using for loop syntax
	for state <- [:won, :lost]

Updating the Map:
- Map.put
- %{game | game_state: :already_used}

Also usage of MapSet

Recursion looping
Tail Call Optimization

Processes and messages:
spawn
- message passing between individual processes
- Process - internal to Elixir internal system
- new process creation using "spawn"
	- spawn(fun)
	- spawn(mfa)
	Example:
	- 1..10 |> Enum.each(fn _ -> spawn fn -> nil; IO.puts "Hello" end end)
	- processes are light wt and cheap 
	- can create one in less than 10micro sec and takes less than 3k of memory
- Messages: send and receive
	- send a message to a process.
	- receive waits for a message to arrive, binds it to a variable, then executes the associated code. 
	- receive block
		- receive do
			msg -> IO.puts("Hello #{inspect msg}")
		  end
	- spawn Procs, :hello, [ ]
	- pid = v(-1)
	- send pid, "Hello"
	- make the function recursive to make process available
Selectively receiving messages with Pattern Matching

Linking Processes together:
	- spawn_link

Agents: An Abstraction over state
included_applications key in the applications list tells Elixir to load the code for an application, but also tells it not to start that application


Fun with fn in iex:

fall_velocity = fn  (distance) -> :math.sqrt(2 * 9.8 * distance) end
#Function<44.65746770/1 in :erl_eval.expr/5>
iex(3)> fall_velocity.(20)
19.79898987322333
iex(4)> fall_velocity.(200)
62.609903369994115


